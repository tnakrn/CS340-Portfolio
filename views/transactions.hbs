<h2>Transactions</h2>

{{!-- Table that shows all of the transactions --}}
<table id="transaction-table">
    <thead>
        {{!-- Print column headers --}}
        <tr>
            <th>ID</th>
            <th>Date</th>
            <th>Player</th>
            <th></th>
        </tr>
    </thead>

    <tbody>
        {{!-- For each row, print attributes in order --}}
        {{#each data}}
        <tr data-value={{this.transactionID}}>
            <td>{{this.transactionID}}</td>
            <td>{{this.transactionDate}}</td>
            <td>{{this.player}}</td>
            {{!-- Delete a transaction (button in table) --}}
            <td><button onclick="deleteTransaction({{this.transactionID}})">Delete</button></td>
        </tr>
        {{/each}}
    </tbody>
</table>


{{!-- Search for a transaction --}}
{{!-- <h3>Search for a Transaction</h3>
<p>Search by entering a user name in the form below:</p>
<form id="search-transaction-html" method='GET' action='/transactions'>
    <label for="input-userName">Search by User Name: </label>
    <input type="text" name="userName" id="input-userName-html-search">

    <input type="submit">
    <a href='/'><button>Reset</button></a>
</form> --}}


{{!-- Add a new transaction --}}
<h3>Add New Transaction</h3>
<p>Enter new transaction information in the form below:</p>
<form id="add-transaction-form" onsubmit="addTransaction(inputTransactionDate.value, inputPlayerID.value)">
    
    <label for="input-transactionDate">Date: </label>
    <input type="date" name="inputTransactionDate" id="input-transactionDate"
        value="1899-04-15" min="1865-01-01" max="1915-12-31">

    <label for="input-playerID">Player: </label>
    <select name="inputPlayerID" id="input-playerID">
        {{! -- Commenting this out to prevent no selection -- <option value="">Select a Player</option>}}
        {{#each players}}
        <option value="{{this.playerID}}">{{this.userName}}</option>
        {{/each}}
    </select>

    <input type="submit" value="Submit">

</form>


{{!-- Update a transaction --}}

<h3>Update a Transaction</h3>
<p>Use the form below to update what player is associated with a transaction:</p>
{{!<form id="update-transaction-form" onsubmit="helloWorld()">}}
<form id="update-transaction-form" onsubmit="updateTransaction(inputTransactionIDNew.value, inputPlayerIDNew.value)">

    <label for="input-transactionIDNew">Transaction: </label>
    <select name="inputTransactionIDNew" id="input-transactionIDNew">
        {{! -- Commenting this out to prevent no selection -- <option value="">Select the Transaction</option>}}
        {{#each data}}
        <option value="{{this.transactionID}}">{{this.transactionDate}}, {{this.player}}</option>
        {{/each}}
    </select>

    <label for="input-playerIDNew">Player: </label>
    <select name="inputPlayerIDNew" id="input-playerIDNew">
         {{! -- Commenting this out to prevent no selection -- <option value="">Select a Player</option>}}
        {{#each players}}
        <option value="{{this.playerID}}">{{this.userName}}</option>
        {{/each}}
    </select>

    <input type="submit" value="Submit">
</form>

{{! ADD TRANSACTION JAVASCRIPT CODE }}

{{!
<script src="../public/js/transactions_js/add_transaction.js" type="text/javascript"></script>
}}

<script>
    // Prevent default action for submitting add transaction
    let addTransactionForm = document.getElementById("add-transaction-form");
    addTransactionForm.addEventListener("submit", function(e) {
        e.preventDefault();
    });

    function addTransaction(transactionDate, playerID) {
        // Put our data we want to send in a javascript object
        let data = {
            inputTransactionDate: transactionDate,
            inputPlayerID: playerID
        }
        
        // Setup our AJAX request
        var xhttp = new XMLHttpRequest();
        xhttp.open("POST", "/add-transaction-form", true);
        xhttp.setRequestHeader("Content-type", "application/json");

        // Tell our AJAX request how to resolve
        xhttp.onreadystatechange = () => {
            if (xhttp.readyState == 4 && xhttp.status == 200) {

                // Add the new data to the table
                addRowToTable(xhttp.response);
            }
            else if (xhttp.readyState == 4 && xhttp.status != 200) {
                console.log("There was an error with the input.")
            }
        }
        // Send the request and wait for the response
        xhttp.send(JSON.stringify(data));
    }

    // Creates a single row in the transactions table
    function addRowToTable(data) {

        // Get a reference to the current table on the page and clear it out.
        let currentTable = document.getElementById("transaction-table");

        // Get a reference to the new row from the database query (last object)
        let parsedData = JSON.parse(data);
        let newRowData = parsedData[parsedData.length - 1]

        // Create a row and 4 cells'
        let transactionIDInt = parseInt(newRowData.transactionID);
        let row = document.createElement("TR");
        row.setAttribute("data-value", `${transactionIDInt}`);
        let idCell = document.createElement("TD");
        let transactionDateCell = document.createElement("TD");
        let playerCell = document.createElement("TD");
        let deleteCell = document.createElement("TD");

        // Fill the cells with correct data
        idCell.innerText = newRowData.transactionID;
        transactionDateCell.innerText = newRowData.transactionDate;
        playerCell.innerText = newRowData.player;
        deleteCell.innerHTML = `<button onclick='deleteTransaction(${transactionIDInt})'>Delete</button>`

        // Add the cells to the row 
        row.appendChild(idCell);
        row.appendChild(transactionDateCell);
        row.appendChild(playerCell);
        row.appendChild(deleteCell)
        
        // Add the row to the table
        currentTable.appendChild(row);

        // Add an option to the update transaction select menu
        let selectTransaction = document.getElementById("input-transactionIDNew");
        let newOption = document.createElement("OPTION");
        newOption.setAttribute("value", `${transactionIDInt}`);
        let newOptionText = document.createTextNode(`${newRowData.transactionDate}, ${newRowData.player}`);
        newOption.appendChild(newOptionText);
        selectTransaction.appendChild(newOption);

    }
</script>

{{! DELETE TRANSACTION JAVASCRIPT CODE }}

{{!
<script src="../public/js/transactions_js/delete_transaction.js" type="text/javascript"></script>
}}
<script>
    function deleteTransaction(transactionID) {
        // Put transactionID in a JSON object
        let data = {
            id: transactionID
        };

        // Set up the DELETE request
        var xhttp = new XMLHttpRequest();
        xhttp.open("DELETE", "/delete-transaction", true);
        xhttp.setRequestHeader("Content-type", "application/json");

        // Resolve
        xhttp.onreadystatechange = () => {
            if (xhttp.readyState == 4 && xhttp.status == 204) {

                // Remove the data from the table
                deleteRow(transactionID);

            }
            else if (xhttp.readyState == 4 && xhttp.status != 204) {
                console.log("There was an error with the input.")
            }
        }
        // Send the request and wait for the response
        xhttp.send(JSON.stringify(data));
    }


    function deleteRow(transactionID){
        let table = document.getElementById("transaction-table");
        let selectTransaction = document.getElementById("input-transactionIDNew");
        for (let i = 0; row = table.rows[i]; i++) {
        // Iterate through rows
        // Delete row with matching transactionID
            if (table.rows[i].getAttribute("data-value") == transactionID) {
                    table.deleteRow(i);
                    selectTransaction.removeChild(selectTransaction.children[i-1]);
                    break;
            }
        }
    }
</script>


{{! UPDATE TRANSACTION JAVASCRIPT CODE }}

{{!
<script src="../public/js/transactions_js/update_transaction.js"></script>
}}
<script>
    // Prevent default action for submitting add transaction
    let updateTransactionForm = document.getElementById("update-transaction-form");
    updateTransactionForm.addEventListener("submit", function(e) {
        e.preventDefault();
    });
    
    function updateTransaction(transactionID, playerID){
        // Put our data we want to send in a javascript object
        let data = {
            transactionID: transactionID,
            playerID: playerID,
        }

        // Setup our AJAX request
        var xhttp = new XMLHttpRequest();
        xhttp.open("PUT", "/update-transaction", true);
        xhttp.setRequestHeader("Content-type", "application/json");

        
        // Tell our AJAX request how to resolve
        xhttp.onreadystatechange = () => {
            if (xhttp.readyState == 4 && xhttp.status == 200) {

                // Add the new data to the table
                updateRow(xhttp.response, transactionID);

            }
            else if (xhttp.readyState == 4 && xhttp.status != 200) {
                console.log("There was an error with the input.")
            }
        }

        // Send the request and wait for the response
        xhttp.send(JSON.stringify(data));

    }

    function updateRow(data, transactionID){
        let parsedData = JSON.parse(data);
        
        let table = document.getElementById("transaction-table");
        let selectTransaction = document.getElementById("input-transactionIDNew");

        for (let i = 0, row; row = table.rows[i]; i++) {
        //iterate through rows
        //rows would be accessed using the "row" variable assigned in the for loop
            if (table.rows[i].getAttribute("data-value") == transactionID) {
                    // Get the location of the row where we found the matching transaction ID
                    let updateRowIndex = table.getElementsByTagName("tr")[i];

                    // Get td of playerID value
                    let td = updateRowIndex.getElementsByTagName("td")[2];

                    // Reassign playerID to our value we updated to
                    td.innerText = parsedData[i-1].player;

                    // Update the select menu with the new transaction date and player values
                    let updateOption = selectTransaction.children[i-1];
                    updateOption.removeChild(updateOption.firstChild);
                    let updateOptionText = document.createTextNode(`${parsedData[i-1].transactionDate}, ${parsedData[i-1].player}`);
                    updateOption.appendChild(updateOptionText);
            }
        }
    }
</script>



